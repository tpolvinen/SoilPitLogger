'CR800 Series Datalogger
'AM16/32 multiplexer in 4x16 mode
'date: 2021-12-10
'program author: Tatu Polvinen / University of Helsinki, Environmental Soil Science

'*** Contstant Table
ConstTable (Constants)
  '* Measurement constants
  Const SCAN_INTERVAL      = 10       'Main Scan interval (seconds)
  Const DATA_INTERVAL      = 5        'Interval for data output to table
  Const CAL_SEQUENCE       = 30       'Calibration sequence duration/output interval in minutes.
  Const CAL_INTERVAL       = 1440     'HFP01SC insitu calibration interval (minutes).
  Const END_CAL_SEQUENCE   = CAL_SEQUENCE - 1  'End HFP01SC insitu calibration one minute before end of calibration sequence time.
  Const BTT_FLAG_TRESHOLD  = 1000      'Treshold voltage to raise btt_wrnng_flg to indicate low voltage on external battery.

  'Enter sensor sensitivity and heater resistance values as constants.
  'These values are unique for each sensor and are listed in the product certificate
  Const HFP01SC_SNSTVT  = 63.25 'Change to your HFP01SC sensitivity (uV/(W/m^2).
  Const HFP01SC_RSSTNC  = 97.0  'Change to your HFP01SC heater resistance (ohm).
  Const HEAT_REF_RSSTNC = 10.0  'Resistance of heater reference resister (ohm).
  Const HFP01SC_AREA    = 3.855e-3  'Area of HFP01SC (m^2).
EndConstTable

'*** Wiring instruction
' * HFP01SC-05 Plate cable
Const PLATE_ANALOG_INPUT = 2    'Starting differential analog input channel in CR800 for plate measurements.
' CR800 2H     HFP signal #2 (white)
' CR800 2L     HFP Signal reference #2 (green)
' CR800 AG     HFP Shield #2 (clear)

' * HFP01SC-05 Heater cable
Const HEATER_ANALOG_INPUT = 3   'Starting differential analog input channel in CR800 for heater measurements.
' CR800 DIFF 3H                  Heater resistor signal #1 (yellow)
' CR800 DIFF 3L                  Heater resistor signal reference #1 (purple)
' CR800 AG                       Heater shield #1 (clear)
' AM16/32 14L -> CR800 SW12      Heater power positive #1 (red)
' AM16/32 14AG                   Heater power negative #1 (black)

' * CR800 datalogger to AM16/32 multiplexer
' CR800 SW12    AM16/32 COM EL    SDI-12 power positive (red)
' CR800 G       AM16/32 G         (yellow-green)
' CR800 12V     AM16/32 12V       (red)
' CR800 C1      AM16/32 EH        SDI-12 signal (purple)
' CR800 C2      AM16/32 CLK       multiplexer pulse: channel advance (blue)
' CR800 C3      AM16/32 RES       multiplexer ON when high (white)

'*** Variables and Units
' * Used for measurements
Dim Count
Public MuxChannelCount
Public CalibrationCount
Public BattV
Units BattV=Volts
Public PTemp_C
Units PTemp_C=C
Public Redox(5)
Units Redox=mV
Public BatterymV
Units BatterymV=mV
Public btt_wrnng_flg As Boolean 'Low external battery warning
Public btt_wrnng_flg_report As String
Public Mult(8)={1,1,1,1,1,1,1,1}
Public Offs(8)={0,0,0,0,0,0,0,0}
' * Teros 12 sensors
Public Teros12(5,3)
Public CCVWC(5)
Units CCVWC=ADC counts
Public Temp_T12(5)
Units Temp_T12=C
Public EC(5)
Units EC=ÂµS/cm
' * Teros 21 sensors
Public Teros21(5,2)
Public Matric_potential(5)
Units Matric_potential=kPa
Public Temp_T21(5)
Units Temp_T21=C
' * OTT PLS sensor
Public Ottpls(2)
Public Water_level
Units Water_level=m
Public Temp_ottpls
Units Temp_ottpls=C
' * HFP01SC-05 sensor -variables used for measurements
Public shf_plate
Units  shf_plate = W/m^2
Public shf_multiplier  = {1000/HFP01SC_SNSTVT} 'Hold multiplier used in computation
Units  shf_multiplier  = W/(m^2 mV)
Dim    shf_mfct_mult   = {1000/HFP01SC_SNSTVT} 'Hold manufacture multiplier all time
Dim    shf_htr_resstnc = {HFP01SC_RSSTNC}      'Hold heater resistance in ohm
' * HFP01SC-05 sensor -variables used for self-calibration
Dim shf_mV                      'Voltage measured from soil heat flux plates
Dim shf_mV_run                  'Running mean of shf_mV
Dim shf_mV_0                    'Running mean of shf_mV at the beginning of calibration
Dim shf_mV_170                  'Running mean of shf_mV after 170 seconds since the beginning of calibration
Dim shf_mV_180                  'Running mean of shf_mV after 180 seconds since the beginning of calibration
Dim shf_mV_end                  'Running mean of shf_mV at the end of calibration
Dim V_rf                        'Reference voltage
Dim V_rf_run                    'Running mean of reference voltage
Dim V_rf_180                    'Running mean of reference voltage after 180 seconds since the beginning of calibration
Dim shf_cal_on_f As Boolean     'Set true while calibration is on
Public shf_cal_sdi12_on_f As Boolean 'Set true while calibration is using SW12 power and multiplexer should not be switched
Public shf_wrnng_flg As Boolean 'HFP01SC self-calibration warnings
Public shf_wrnng_flg_report As String

Dim i As Long
'Dim truefalse (2) = {"True", "False"} As String*5

'***Data Tables
DataTable(SoilPitDataTable,True,-1)
  DataInterval(0, DATA_INTERVAL, Min, 10)
  ' * Redox sensors' data
  Average(1,Redox(1),FP2,False)
  Average(1,Redox(2),FP2,False)
  Average(1,Redox(3),FP2,False)
  Average(1,Redox(4),FP2,False)
  Average(1,Redox(5),FP2,False)
  ' * Teros 12 sensors' data
  Average(1,CCVWC(1),FP2,False)
  Average(1,Temp_T12(1),FP2,False)
  Average(1,EC(1),FP2,False)
  Average(1,CCVWC(2),FP2,False)
  Average(1,Temp_T12(2),FP2,False)
  Average(1,EC(2),FP2,False)
  Average(1,CCVWC(3),FP2,False)
  Average(1,Temp_T12(3),FP2,False)
  Average(1,EC(3),FP2,False)
  Average(1,CCVWC(4),FP2,False)
  Average(1,Temp_T12(4),FP2,False)
  Average(1,EC(4),FP2,False)
  Average(1,CCVWC(5),FP2,False)
  Average(1,Temp_T12(5),FP2,False)
  Average(1,EC(5),FP2,False)
  ' * Teros 21 sensors' data
  Average(1,Matric_potential(1),FP2,False)
  Average(1,Temp_T21(1),FP2,False)
  Average(1,Matric_potential(2),FP2,False)
  Average(1,Temp_T21(2),FP2,False)
  Average(1,Matric_potential(3),FP2,False)
  Average(1,Temp_T21(3),FP2,False)
  Average(1,Matric_potential(4),FP2,False)
  Average(1,Temp_T21(4),FP2,False)
  Average(1,Matric_potential(5),FP2,False)
  Average(1,Temp_T21(5),FP2,False)
  Average(1,Water_level,FP2,False)
  Average(1,Temp_ottpls,FP2,False)
  ' * HFP01SC-05 sensor's data
  Average (1, shf_plate,      IEEE4, 0)   'Soil heat flux through a plate
  Sample (1, shf_multiplier,  IEEE4)      'Multipliers for soil heat flux plates
  Sample (1, shf_htr_resstnc, IEEE4)      'Heater resistance of self-calibrated soil heat flux plate
  'Warning flag indicates the peformace of self-calibration #1 (see HFP01SC manual v1624)
  'Sample (1, truefalse (2 + shf_wrnng_flg), String)
  Sample (1, shf_wrnng_flg_report, String)
  FieldNames ("shfp_wrnng_flg")
  ' * External battery warning flag
  'Sample (1, truefalse (2 + btt_wrnng_flg), String)
  Sample (1, btt_wrnng_flg_report, String)
  FieldNames ("btt_wrnng_flg")
  Minimum(1,BatterymV,FP2,False,False)
  ' * Default CR800 data: internal battery and panel temperature
  Minimum(1,BattV,FP2,False,False)
  Average(1,PTemp_C,FP2,False)
EndTable

'*** Main Program
BeginProg
  ' * Main Scan
  Scan(SCAN_INTERVAL,Sec,1,0)

    '*** HFP01SC-05 sensor measurements
    VoltDiff (shf_mV, 1, mV250, PLATE_ANALOG_INPUT, TRUE, 500, 60, 1, 0)

    'Apply HFP01SC-05 soil heat flux plate calibration.
    shf_plate = shf_mV*shf_multiplier

    '*** Measure voltage across the heater (V_Rf).
    VoltDiff (V_rf, 1, mV5000, HEATER_ANALOG_INPUT, TRUE, 500, 60, 0.001, 0)

    'Maintain filtered values for calibration.
    AvgRun (shf_mV_run, 1, shf_mV, 5)
    AvgRun (V_rf_run, 1, V_rf, 5)

    ' *** HFP01SC self-calibration one minute into CAL_INTERVAL.
    If (TimeIntoInterval (1,CAL_INTERVAL,Min)) Then
      shf_cal_on_f = TRUE
      shf_cal_sdi12_on_f = TRUE
      Move (shf_mV_0, 1, shf_mV_run, 1)
      'Turn AM16/32 Multiplexer On
      PortSet(3,1)
      Delay(0,150,mSec)
      MuxChannelCount = 1
      For i = 1 To 7
        'Switch to next AM16/32 Multiplexer channel
        PulsePort(2,10000)
        MuxChannelCount = i
      Next i
      'Enable power to SDI-12 Sensors
      SW12(1)
    EndIf

    ' *** Record voltage output 10 seconds before end of heating cycle.
    If (TimeIntoInterval (230, CAL_INTERVAL*60, Sec)) Then
      Move (shf_mV_170, 1, shf_mV_run, 1)
    EndIf
    
    ' *** Record voltage output at end of heating cycle and power down heaters.
    If (TimeIntoInterval (4,CAL_INTERVAL,Min)) Then
      Move (shf_mV_180, 1, shf_mV_run, 1)
      Move (V_rf_180,   1, V_rf_run,   1)
      SW12(0)
      shf_cal_sdi12_on_f = FALSE
      'Turn AM16/32 Multiplexer Off
      PortSet(3,0)
      Delay(0,150,mSec)
      MuxChannelCount = 0
      CalibrationCount = CalibrationCount + 1
    EndIf

    'End HFP01SC calibration sequence.
    If (TimeIntoInterval (END_CAL_SEQUENCE,CAL_INTERVAL,Min)) Then
      Move (shf_mV_end, 1, shf_mV_run, 1)
      'Compute new HFP01SC calibration factors.
      If (V_rf_180 <> NaN) AND (shf_mV_0 <> NaN) AND (shf_mV_180 <> NaN) Then
        shf_wrnng_flg = FALSE
        shf_wrnng_flg_report = "FALSE"
        'In the following equation 2 means that heat emitts in two directions
        shf_multiplier = ((V_rf_180*V_rf_180*shf_htr_resstnc /2/HFP01SC_AREA/HEAT_REF_RSSTNC/HEAT_REF_RSSTNC) _
        /ABS (shf_mV_180-((shf_mV_0+shf_mV_end)/2)))
        If ((1000/shf_multiplier < 800/shf_mfct_mult) OR (1000/shf_multiplier > 1050/shf_mfct_mult) _
          OR (ABS(shf_mV_end-shf_mV_0) > 0.1* ABS(shf_mV_180-((shf_mV_0+shf_mV_end)/2))) _
          OR (ABS(shf_mV_180-shf_mV_170) > 0.1 *ABS(shf_mV_180-((shf_mV_0+shf_mV_end)/2)))) Then
          shf_wrnng_flg = TRUE
          shf_wrnng_flg_report = "TRUE"
          shf_multiplier = shf_mfct_mult
        EndIf
      Else
        shf_wrnng_flg = TRUE
        shf_wrnng_flg_report = "TRUE"
      EndIf
      shf_cal_on_f = FALSE
    EndIf

    If (shf_cal_sdi12_on_f = FALSE AND TimeIntoInterval (270, DATA_INTERVAL*60, Sec)) Then
      '*** Redox, Teros 12 and Teros 21 measurements
      'Turn AM16/32 Multiplexer On
      PortSet(3,1)
      Delay(0,150,mSec)
      MuxChannelCount = 1
      SubScan(0,uSec,5)
        'Switch to next AM16/32 Multiplexer channel
        PulsePort(2,10000) 'delay of 10000 = 10 milliseconds
        'Redox measurement
        VoltDiff(Redox(MuxChannelCount),1,mV2500,1,True,0,_50Hz,Mult(MuxChannelCount+1),Offs(MuxChannelCount+1))
        'Enable power to SDI-12 Sensors
        SW12(1)
        'Allow Teros 12 and 21 SDI-12 Sensors to warmup before polling
        Delay(0,1000,mSec)
        'Poll Teros 12 SDI-12 Sensor measurements 'CCVWC()', 'Temp_T12()', and 'EC()'
        SDI12Recorder(Teros12(MuxChannelCount,1),1,"0","M!",1,0)
        'Poll Teros 21 SDI-12 Sensor measurements 'Matric_potential()', and 'Temp_T21()'
        SDI12Recorder(Teros21(MuxChannelCount,1),1,"1","M!",1,0)
        'Disable power to SDI-12 Sensors
        SW12(0)
        MuxChannelCount=MuxChannelCount+1
      NextSubScan

      For Count=1 To 5
        CCVWC(Count)=Teros12(Count,1)
        Temp_T12(Count)=Teros12(Count,2)
        EC(Count)=Teros12(Count,3)
        Matric_potential(Count)=Teros21(Count,1)
        Temp_T21(Count)=Teros21(Count,2)
      Next

      '*** OTT PLS measurements
      'Switch to next AM16/32 Multiplexer channel
      PulsePort(2,10000)
      'Enable power to OTT PLS sensor
      SW12(1)
      'Allow OTT PLS SDI-12 Sensor to warmup before polling
      Delay(0,1000,mSec)
      'Poll OTT PLS SDI-12 Sensor measurements 'Water_level', and 'Temp_ott_pls'
      SDI12Recorder(Ottpls(),1,"A","M!",1,0)
      'Disable power to OTT PLS Sensor
      SW12(0)
      MuxChannelCount=MuxChannelCount+1
      Water_level=Ottpls(1)
      Temp_ottpls=Ottpls(2)

      '*** Battery voltage measurement
      'Switch to next AM16/32 Multiplexer channel
      PulsePort(2,10000)
      VoltDiff(BatterymV,1,mV2500,1,True,0,_50Hz,Mult(1),Offs(1))
      If (BatterymV > BTT_FLAG_TRESHOLD) Then
        btt_wrnng_flg = FALSE
        btt_wrnng_flg_report = "FALSE"
      Else
        btt_wrnng_flg = TRUE
        btt_wrnng_flg_report = "TRUE"
      EndIf

      'Turn AM16/32 Multiplexer Off
      PortSet(3,0)
      Delay(0,150,mSec)
      MuxChannelCount = 0

      '*** Default CR800 Datalogger Battery Voltage measurement 'BattV'
      Battery(BattV)

      '*** Default CR800 Datalogger Wiring Panel Temperature measurement 'PTemp_C'
      PanelTemp(PTemp_C,_50Hz)
    EndIf

    'Call Data Tables and Store Data
    CallTable SoilPitDataTable
  NextScan
EndProg
